{
  "schemaVersion": "0.3",
  "description": "Tag or Untag an IAM role for SCP exemption",
  "assumeRole": "{{ automationAssumeRole }}",
  "parameters": {
    "RoleName": {
      "description": "IAM Role Name",
      "type": "String"
    },
    "TagUntag": {
      "allowedValues": [
        "Tag",
        "Untag"
      ],
      "default": "Tag",
      "description": "Tag or Untag the role",
      "type": "String"
    },
    "automationAssumeRole": {
      "default": ${jsonencode(ssm_automation_admin_assume_role_arn)},
      "description": "(Required) if running from a Centralized Account",
      "type": "String"
    },
    "ExemptionTagKeys": {
      "description": "Exemption Tag Keys",
      "type": "StringList"
    }
  },
  "mainSteps": [
    {
      "outputs": [
        {
          "Type": "String",
          "Name": "Status",
          "Selector": "$.Payload.status"
        }
      ],
      "inputs": {
        "Script": "def script_handler(events, context):\n  import boto3\n\n  try:\n      iam_client = boto3.client('iam')\n\n      role_name = events.get('role_name', None)\n      exemption_tag_keys = events.get('exemption_tag_keys', None)\n      tag_untag = events.get('tag_untag', None)\n\n      if tag_untag and tag_untag.lower() == 'tag':\n          exe_tags = []\n\n          for exe_tag in exemption_tag_keys:\n              exe_tags.append(\n                  {\n                      'Key': exe_tag,\n                      'Value': 'true'\n                  }\n              )\n          try:\n              if role_name and exe_tags:\n                  tag_role_params = {'RoleName': role_name, 'Tags': exe_tags}\n                  iam_client.tag_role(**tag_role_params)\n                  print(f'Role: {role_name} Tagged')\n                  # print(f'{iam_client.list_user_tags(UserName=role_name)[\"Tags\"]}')\n          except iam_client.exceptions.NoSuchEntityException:\n              print(f'Role: {role_name} does not exist')\n              print(f'Attempting to tag user: {role_name}')\n              try:\n                  tag_user_params = {\n                      'UserName': role_name,\n                      'Tags': exe_tags\n                  }\n                  iam_client.tag_user(**tag_user_params)\n                  print(f'User: {role_name} Tagged')\n                  # print(f'{iam_client.list_user_tags(UserName=role_name)[\"Tags\"]}')\n              except iam_client.exceptions.NoSuchEntityException:\n                  print(f'User: {role_name} does not exist')\n                  raise\n      elif tag_untag and tag_untag.lower() == 'untag':\n          try:\n              if role_name and exemption_tag_keys:\n                  iam_client.untag_role(\n                      RoleName=role_name,\n                      TagKeys=exemption_tag_keys\n                  )\n                  print(f'Role: {role_name} UnTagged')\n                  # print(f'{iam_client.list_user_tags(UserName=role_name)[\"Tags\"]}')\n          except iam_client.exceptions.NoSuchEntityException:\n              print(f'Role: {role_name} does not exist')\n              print(f'Attempting to untag user: {role_name}')\n              try:\n                  iam_client.untag_user(\n                      UserName=role_name,\n                      TagKeys=exemption_tag_keys\n                  )\n                  print(f'User: {role_name} UnTagged')\n                  # print(f'{iam_client.list_user_tags(UserName=role_name)[\"Tags\"]}')\n              except iam_client.exceptions.NoSuchEntityException:\n                  print(f'User: {role_name} does not exist')\n                  raise\n\n  except Exception as e:\n      print(f'Exception: {str(e)}')\n      raise\n\n  return {'status': 'Success'}",
        "Runtime": "python3.10",
        "InputPayload": {
          "role_name": "{{ RoleName }}",
          "exemption_tag_keys": "{{ ExemptionTagKeys }}",
          "tag_untag": "{{ TagUntag }}"
        },
        "Handler": "script_handler"
      },
      "name": "TagUntagRole",
      "description": "Tag or Untag the provided role",
      "action": "aws:executeScript",
      "isEnd": true
    }
  ]
}